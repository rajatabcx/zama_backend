// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UpsellStatus {
  DRAFT
  ONGOING
  COMPLETED
  ERROR
}

model User {
  id             String          @id @unique @default(uuid())
  name           String?
  email          String          @unique
  password       String?
  passwordToken  String?
  productUpsells ProductUpsell[]
  shopifyStore   ShopifyStore?
  emailSetting   EmailSettings?
  acceptedTNC    Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([name])
  @@index([email])
  @@map("users")
}

model EmailSettings {
  id                        String   @id @unique @default(uuid())
  elasticEmailApiKey        String
  checkoutTemplateName      String?
  productUpsellTemplateName String?
  fromEmail                 String?
  userId                    String   @unique
  user                      User     @relation(fields: [userId], references: [id])
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("email_settings")
}

model ShopifyStore {
  id                    String     @id @unique @default(uuid())
  name                  String     @unique
  accessToken           String     @unique
  storeFrontAccessToken String?    @unique
  scope                 String
  selectedProductIds    Json[]
  discountId            BigInt?
  priceRuleId           BigInt?
  discountCode          String?
  discountPercentage    Float?
  webhookRegistered     Boolean    @default(false)
  hourDelay             Int        @default(10)
  checkouts             Checkout[]
  userId                String     @unique
  user                  User       @relation(fields: [userId], references: [id])
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@index([name])
  @@map("shopify_stores")
}

model Checkout {
  id                             String       @id @unique @default(uuid())
  shopifyAdminCheckoutToken      String       @unique
  shopifyStorefrontCheckoutId    String       @unique
  shopifyStoreFrontCheckoutToken String       @unique
  shopifyAbandonedCheckoutURL    String       @unique
  email                          String?
  emailSent                      Boolean      @default(false)
  orderFulFilled                 Boolean      @default(false)
  shopifyStoreId                 String
  shopifyStore                   ShopifyStore @relation(fields: [shopifyStoreId], references: [id])
  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt

  @@map("checkouts")
}

model ProductUpsell {
  id           String       @id @unique @default(uuid())
  name         String
  productIds   Json[]
  discountId   String?
  listName     String?
  emailSent    Int?
  emailNotSent Int?
  status       UpsellStatus @default(DRAFT)
  userId       String?
  user         User?        @relation(fields: [userId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("product_upsells")
}
