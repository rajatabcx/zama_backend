// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UpsellStatus {
  DRAFT
  ONGOING
  COMPLETED
  ERROR
}

enum EmailServiceProvider {
  ELASTICEMAIL
  BRAZE
}

enum ReviewPlatformName {
  JUDGE_ME
  OKENDO
  YOTPO
}

enum SMSPlatformName {
  POSTSCRIPT
  ATTENTIVE
}

model User {
  id              String           @id @unique @default(uuid())
  name            String?
  email           String           @unique
  password        String?
  passwordToken   String?
  shopifyStore    ShopifyStore?
  emailSettings   EmailSettings[]
  reviewPlatforms ReviewPlatform[]
  smsPlatforms    SMSPlatform[]
  productUpsells  ProductUpsell[]
  integrations    Json?
  acceptedTNC     Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([name])
  @@index([email])
  @@map("users")
}

model EmailSettings {
  id                    String               @id @unique @default(uuid())
  apiKey                String
  checkoutTemplate      String?
  productUpsellTemplate String?
  reviewTemplate        String?
  fromEmail             String?
  emailServiceProvider  EmailServiceProvider @default(ELASTICEMAIL)
  enabled               Boolean              @default(false)
  userId                String
  user                  User                 @relation(fields: [userId], references: [id])
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  @@map("email_settings")
}

model ShopifyStore {
  id                    String     @id @unique @default(uuid())
  name                  String     @unique
  accessToken           String     @unique
  storeFrontAccessToken String?    @unique
  scope                 String
  selectedProductIds    Json[]
  discountId            BigInt?
  priceRuleId           BigInt?
  discountCode          String?
  discountPercentage    Float?
  webhookRegistered     Boolean    @default(false)
  hourDelay             Int        @default(10)
  checkouts             Checkout[]
  userId                String     @unique
  user                  User       @relation(fields: [userId], references: [id])
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@index([name])
  @@map("shopify_stores")
}

model Checkout {
  id                             String       @id @unique @default(uuid())
  shopifyAdminCheckoutToken      String       @unique
  shopifyStorefrontCheckoutToken String       @unique
  shopifyStorefrontCheckoutId    String       @unique
  shopifyAbandonedCheckoutURL    String       @unique
  orderPlaced                    Boolean      @default(false)
  orderFulFilled                 Boolean      @default(false)
  shopifyOrderId                 BigInt?      @unique
  shopifyOrderGraphqlId          String?      @unique
  email                          String?
  checkoutEmailSent              Boolean      @default(false)
  reviewEmailSent                Boolean      @default(false)
  reviewSubmittedFor             BigInt[]
  shopifyStoreId                 String
  shopifyStore                   ShopifyStore @relation(fields: [shopifyStoreId], references: [id])
  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt

  @@map("checkouts")
}

model ProductUpsell {
  id           String       @id @unique @default(uuid())
  name         String
  productIds   Json[]
  discountId   String?
  listName     String?
  emailSent    Int?
  emailNotSent Int?
  status       UpsellStatus @default(DRAFT)
  userId       String?
  user         User?        @relation(fields: [userId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("product_upsells")
}

model ReviewPlatform {
  id          String             @id @unique @default(uuid())
  accessToken String
  name        ReviewPlatformName
  enabled     Boolean
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("review_platforms")
}

model SMSPlatform {
  id          String          @id @unique @default(uuid())
  accessToken String
  name        SMSPlatformName
  enabled     Boolean
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("sms_platforms")
}
